name: CI/CD Pipeline

# Gatilho: O workflow será executado em cada push para a branch "main"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Permissões mínimas para o job
permissions:
  contents: read

jobs:
  # O nome do job é "lint-and-test"
  lint-and-test:
    # O job será executado em uma máquina virtual Ubuntu
    runs-on: ubuntu-latest
    strategy:
      # Executar para múltiplas versões do Python para garantir a compatibilidade
      matrix:
        python-version: ["3.10"]

    steps:
      # 1. Clona o repositório para a máquina virtual
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura a versão do Python especificada na matriz
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # Habilita o cache de dependências para acelerar execuções futuras
          cache: 'pip'

      # 3. Instala as dependências a partir do arquivo requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt

      # 4. Executa o linter (pylint) para análise estática do código
      - name: Analyse code with pylint
        run: |
          python -m pylint $(git ls-files '*.py')

      # Etapa futura sugerida: Adicionar testes com pytest
      # - name: Run tests with pytest
      #   run: |
      #     pip install pytest
      #     pytest

  deploy:
    name: Deploy project
    permissions:
      deployments: write
      packages: write
      contents: read
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-main
      cancel-in-progress: true
    steps:
      - name: Checkout Repository
        uses: 'actions/checkout@v4'
        with:
          ref: main
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          environment: production
      - name: Set up SSH Key and Deploy my App on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          script: |
            set -euo pipefail
            PROJECT_DIR="/home/${{ secrets.VPS_USERNAME }}/meu-projeto-fastapi"

            mkdir -p "$PROJECT_DIR"
            if [ -d "$PROJECT_DIR/.git" ]; then
              git -C "$PROJECT_DIR" pull origin main
            else
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_DIR"
            fi

            cd "$PROJECT_DIR"

            # Build e (re)start em background
            docker-compose build
            docker-compose up -d

            # Smoke test
            for i in {1..30}; do
              if curl -fsS http://localhost:8000/healthz >/dev/null; then
                echo "Health OK";
                exit 0
              fi
              sleep 2
              done
              echo "Healthcheck falhou";
              exit 1

      - name: Update deployment Status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
