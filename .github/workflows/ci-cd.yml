name: CI/CD Pipeline

# Gatilho: O workflow será executado em cada push para a branch "main"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Permissões mínimas para o job
permissions:
  contents: read

jobs:
  # O nome do job é "lint-and-test"
  lint-and-test:
    # O job será executado em uma máquina virtual Ubuntu
    runs-on: ubuntu-latest
    strategy:
      # Executar para múltiplas versões do Python para garantir a compatibilidade
      matrix:
        python-version: ["3.10"]

    steps:
      # 1. Clona o repositório para a máquina virtual
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura a versão do Python especificada na matriz
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # Habilita o cache de dependências para acelerar execuções futuras
          cache: 'pip'

      # 3. Instala as dependências a partir do arquivo requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt

      # 4. Executa o linter (pylint) para análise estática do código
      - name: Analyse code with pylint
        run: |
          python -m pylint $(git ls-files '*.py')

      # Etapa futura sugerida: Adicionar testes com pytest
      # - name: Run tests with pytest
      #   run: |
      #     pip install pytest
      #     pytest

  deploy:
    name: Deploy fastapi
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    needs: ["lint-and-test"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_IP }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
          docker stop fastapi-app || true
          docker rm fastapi-app || true
          docker run -d --name fastapi-app -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
